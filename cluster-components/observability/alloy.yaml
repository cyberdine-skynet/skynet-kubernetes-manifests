apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: alloy
  namespace: observability
  labels:
    app.kubernetes.io/name: alloy
    app.kubernetes.io/component: telemetry
    app.kubernetes.io/part-of: observability-stack
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: alloy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: alloy
        app.kubernetes.io/component: telemetry
    spec:
      serviceAccountName: alloy
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: alloy
        image: grafana/alloy:v0.38.0
        args:
          - run
          - /etc/alloy/config.alloy
          - --server.http.listen-addr=0.0.0.0:12345
          - --stability.level=public-preview
        ports:
        - containerPort: 12345
          name: http
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: config
          mountPath: /etc/alloy
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        securityContext:
          privileged: true
          runAsUser: 0
      volumes:
      - name: config
        configMap:
          name: alloy-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      tolerations:
      - operator: Exists
        effect: NoSchedule

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alloy
  namespace: observability
  labels:
    app.kubernetes.io/name: alloy
    app.kubernetes.io/component: telemetry

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy
  labels:
    app.kubernetes.io/name: alloy
    app.kubernetes.io/component: telemetry
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  - events
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy
  labels:
    app.kubernetes.io/name: alloy
    app.kubernetes.io/component: telemetry
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alloy
subjects:
- kind: ServiceAccount
  name: alloy
  namespace: observability

---
apiVersion: v1
kind: Service
metadata:
  name: alloy
  namespace: observability
  labels:
    app.kubernetes.io/name: alloy
    app.kubernetes.io/component: telemetry
spec:
  type: ClusterIP
  ports:
  - port: 12345
    targetPort: http
    protocol: TCP
    name: http
  - port: 4317
    targetPort: otlp-grpc
    protocol: TCP
    name: otlp-grpc
  - port: 4318
    targetPort: otlp-http
    protocol: TCP
    name: otlp-http
  selector:
    app.kubernetes.io/name: alloy

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: observability
  labels:
    app.kubernetes.io/name: alloy
    app.kubernetes.io/component: telemetry
data:
  config.alloy: |
    // Grafana Alloy configuration for Skynet Platform
    
    // Logging configuration
    logging {
      level  = "info"
      format = "logfmt"
    }

    // Loki logs discovery and forwarding
    discovery.kubernetes "pods" {
      role = "pod"
    }

    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets

      rule {
        source_labels = ["__meta_kubernetes_pod_phase"]
        regex         = "Pending|Succeeded|Failed|Completed"
        action        = "drop"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
        regex         = "false"
        action        = "drop"
      }
    }

    loki.source.kubernetes "pods" {
      targets    = discovery.relabel.pod_logs.output
      forward_to = [loki.write.default.receiver]
    }

    loki.write "default" {
      endpoint {
        url = "http://loki:3100/loki/api/v1/push"
        
        // Add custom labels
        external_labels = {
          cluster = "skynet-cluster",
          env     = "production",
        }
      }
    }

    // Prometheus metrics discovery and scraping
    discovery.kubernetes "services" {
      role = "service"
    }

    discovery.kubernetes "endpoints" {
      role = "endpoints"
    }

    discovery.kubernetes "pods_metrics" {
      role = "pod"
    }

    // Kubernetes API server metrics
    discovery.kubernetes "api_server" {
      role = "endpoints"
      namespaces {
        names = ["default"]
      }
    }

    discovery.relabel "api_server" {
      targets = discovery.kubernetes.api_server.targets

      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_service_name", "__meta_kubernetes_endpoint_port_name"]
        regex         = "default;kubernetes;https"
        action        = "keep"
      }
    }

    prometheus.scrape "api_server" {
      targets    = discovery.relabel.api_server.output
      forward_to = [prometheus.remote_write.default.receiver]
      
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        insecure_skip_verify = true
      }
    }

    // Node metrics
    discovery.kubernetes "nodes" {
      role = "node"
    }

    prometheus.scrape "nodes" {
      targets    = discovery.kubernetes.nodes.targets
      forward_to = [prometheus.remote_write.default.receiver]
      
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        insecure_skip_verify = true
      }
    }

    // cAdvisor metrics
    prometheus.scrape "cadvisor" {
      targets         = discovery.kubernetes.nodes.targets
      metrics_path    = "/metrics/cadvisor"
      forward_to      = [prometheus.remote_write.default.receiver]
      
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        insecure_skip_verify = true
      }
    }

    // Pod metrics with annotation-based discovery
    discovery.relabel "pod_metrics" {
      targets = discovery.kubernetes.pods_metrics.targets

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
        regex         = "true"
        action        = "keep"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
        target_label  = "__metrics_path__"
      }

      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"]
        regex         = "([^:]+)(?::\\d+)?;(\\d+)"
        replacement   = "${1}:${2}"
        target_label  = "__address__"
      }

      rule {
        regex  = "__meta_kubernetes_pod_label_(.+)"
        action = "labelmap"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "kubernetes_namespace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "kubernetes_pod_name"
      }
    }

    prometheus.scrape "pods" {
      targets    = discovery.relabel.pod_metrics.output
      forward_to = [prometheus.remote_write.default.receiver]
    }

    // OpenTelemetry receiver for traces and metrics
    otelcol.receiver.otlp "default" {
      grpc {
        endpoint = "0.0.0.0:4317"
      }
      http {
        endpoint = "0.0.0.0:4318"
      }

      output {
        metrics = [otelcol.processor.batch.default.input]
        logs    = [otelcol.processor.batch.default.input]
        traces  = [otelcol.processor.batch.default.input]
      }
    }

    otelcol.processor.batch "default" {
      output {
        metrics = [otelcol.exporter.prometheus.default.input]
        logs    = [otelcol.exporter.loki.default.input]
        traces  = [otelcol.exporter.jaeger.default.input]
      }
    }

    otelcol.exporter.prometheus "default" {
      forward_to = [prometheus.remote_write.default.receiver]
    }

    otelcol.exporter.loki "default" {
      forward_to = [loki.write.default.receiver]
    }

    otelcol.exporter.jaeger "default" {
      client {
        endpoint = "http://tempo:14250"
        tls {
          insecure = true
        }
      }
    }

    // Prometheus remote write
    prometheus.remote_write "default" {
      endpoint {
        url = "http://prometheus:9090/api/v1/write"
        
        // Add cluster labels
        external_labels = {
          cluster = "skynet-cluster",
          region  = "local",
        }
      }
    }
