# Prometheus with Tanka integration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: observability
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: observability-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
    spec:
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      containers:
      # Main Prometheus container
      - name: prometheus
        image: prom/prometheus:v2.47.0
        args:
          - --config.file=/etc/prometheus/prometheus.yml
          - --storage.tsdb.path=/prometheus
          - --storage.tsdb.retention.time=30d
          - --storage.tsdb.retention.size=10GB
          - --web.console.libraries=/usr/share/prometheus/console_libraries
          - --web.console.templates=/usr/share/prometheus/consoles
          - --web.enable-lifecycle
          - --web.enable-admin-api
          - --log.level=info
        ports:
        - containerPort: 9090
          name: http
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        - name: tanka-rules
          mountPath: /etc/prometheus/rules
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
      
      # Tanka sidecar for observability as code
      - name: tanka-sidecar
        image: grafana/tanka:v0.25.0
        command: ["/bin/sh"]
        args:
          - -c
          - |
            set -e
            echo "Starting Tanka sidecar for observability as code..."
            
            # Clone kubernetes-mixin and observability configs
            git clone https://github.com/kubernetes-monitoring/kubernetes-mixin.git /tmp/kubernetes-mixin
            
            # Initialize tanka environment if not exists
            if [ ! -d "/config/environments" ]; then
              cd /config
              tk init
              tk env add environments/skynet
            fi
            
            # Copy kubernetes-mixin
            cp -r /tmp/kubernetes-mixin /config/vendor/
            
            # Generate prometheus rules and dashboards
            cd /config
            tk eval environments/skynet --output-type=json | jq -r '.[] | select(.kind=="PrometheusRule") | .spec.groups[] | @json' > /shared/prometheus-rules.json
            
            # Watch for changes and regenerate
            while true; do
              echo "Monitoring for tanka configuration changes..."
              tk eval environments/skynet --output-type=yaml > /shared/generated-manifests.yaml
              sleep 300  # Check every 5 minutes
            done
        env:
        - name: JSONNET_PATH
          value: "/config/vendor"
        volumeMounts:
        - name: tanka-config
          mountPath: /config
        - name: shared-data
          mountPath: /shared
        - name: tanka-rules
          mountPath: /etc/prometheus/rules
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
      
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-storage
      - name: tanka-config
        configMap:
          name: tanka-config
      - name: tanka-rules
        emptyDir: {}
      - name: shared-data
        emptyDir: {}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: observability
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- apiGroups: ["networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: observability

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: observability
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: prometheus

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: observability
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 20Gi
